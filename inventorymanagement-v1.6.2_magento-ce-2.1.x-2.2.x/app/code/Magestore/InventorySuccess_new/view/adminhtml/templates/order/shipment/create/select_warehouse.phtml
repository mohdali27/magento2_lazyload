
<?php $warehouses = $this->getAvailableWarehouses(); ?>
<div class="entry-edit form-inline" style="width:500px">
    <fieldset class="fieldset admin__fieldset">

        <?php echo $block->getChildHtml(); ?>
        
        <div class="admin__field field">
            <!--
            <label class="label admin__field-label">
                <span><?php echo __('Select Location to create shipment') ?>:</span>
            </label>
            -->
            <div class="admin__field-control">
                <select class="admin__control-select" name="shipment[warehouse]" id="shipment[warehouse]" style="width:100%">
<!--                    <option value="">--><?php ///* @escapeNotVerified */ echo __('Select Warehouse')?><!--</option>-->
                    <?php if(count($warehouses)): ?>
                        <?php foreach($warehouses as $warehouseId => $warehouse): ?>
                    <option value="<?php echo $warehouseId ?>" <?php echo (count($warehouses)==1) ? 'selected="selected"' : '' ?>><?php echo $warehouse['label'] ?></option>
                        <?php endforeach; ?>
                    <?php endif; ?>
                </select>        
            </div>
        </div>
        <div class="aadmin__field field" id="shipment_request_stock_notify" style="margin-top:-20px;margin-bottom:20px;"></div>  
    </fieldset>
</div>
<script>
require([
    "jquery",
    "Magento_Ui/js/modal/alert",
    "mage/translate",
    "prototype"
], function(jQuery, Alert, $t){

//<![CDATA[
    var warehouseJson = <?php echo $this->getWarehouseJson() ?>;
//]]>
    var requestStockUrl = '<?php echo $this->getRequestStockUrl() ?>';
    window.allowShipOverQtyInWarehouse = false;
        
    Event.observe($("shipment[warehouse]"), 'change', changeShipmentWarehouse);
    changeShipmentWarehouse();
    
    $$('.bundle-qty-to-ship-input').each(function(item) {
        Event.observe(item, 'change', changeBundleQtyToShip);
    });    
    
    
    $$('.qty-to-ship-input').each(function(item) {
        var itemId = item.id;
        itemId = itemId.replace("shipment[items][", "");
        itemId = itemId.replace("]", "");
        var qtyToShip = parseFloat(item.value);
        if(isNaN(qtyToShip)) {
            qtyToShip = 0;
        }        
        setQtyToShip(itemId, qtyToShip);
        Event.observe(item, 'change', changeQtyToShip);
    });  
    
    /**
     * change qty-to-ship of bundle item
     */
    function changeBundleQtyToShip(event) {
        var qtyToShipEl = $(event.target.id);
        var qtyToShip = parseFloat(qtyToShipEl.value);
        if(isNaN(qtyToShip)) {
            qtyToShip = 0;
        }         
        var itemId = qtyToShipEl.id;
        itemId = itemId.replace("shipment[items][", "");
        itemId = itemId.replace("]", "");
        qtyToShip = Math.min(qtyToShip, getQtyToShip(itemId));
        qtyToShipEl.value = qtyToShip;       
        
        $$('.bundle-child-qty-to-ship-input'+itemId).each(function(item) {
            var bundleQty = item.next().value;
            bundleQty = bundleQty * qtyToShip;
            item.value = bundleQty;
            var cloneEvent = {target: {id: item.id}};
            var allowShipOverQtyInWarehouse = window.allowShipOverQtyInWarehouse;
            window.allowShipOverQtyInWarehouse = true;
            changeQtyToShip(cloneEvent);
            window.allowShipOverQtyInWarehouse = allowShipOverQtyInWarehouse;
        });         
    }
    
    /**
     * Change qty-to-ship
     */
    function changeQtyToShip(event) {
        var qtyToShipEl = $(event.target.id);
        var selectWarehouseId = $("shipment[warehouse]").value;
        var warehouse = warehouseJson[selectWarehouseId];   
        if(typeof warehouse === 'undefined') {
            return;
        }        
        var items = warehouse['items'];
        for (var itemId in items) {
            var item = items[itemId];
            if("shipment[items][" +itemId+ "]" == qtyToShipEl.id ) {
                /* find qty-elements */
                var qtyInWarehouseEl =  $("qty_in_warehouse["+ itemId +"]");
                var qtyPendingShipEl =  $("qty_pending_ship["+ itemId +"]");  
                
                /* calculate qtys */
                var qtyInWarehouse = item['qty_in_warehouse'];
                var qtyToShip = getQtyToShip(itemId);

                var qtyCanShip = parseFloat(qtyToShipEl.value);
                
                if(isNaN(qtyCanShip)) {
                    qtyCanShip = 0;
                }
                
                if(window.allowShipOverQtyInWarehouse) {
                    qtyCanShip = Math.min(qtyCanShip, qtyToShip);
                } else {
                    qtyCanShip = Math.min(qtyCanShip, qtyToShip, qtyInWarehouse);
                }
                qtyCanShip = Math.max(0, qtyCanShip);
                
                var qtyPendingShip = Math.min(qtyToShip - qtyCanShip, qtyToShip);
                                
                /* fill qtys to elements */
                qtyToShipEl.value = qtyCanShip;
                if(qtyInWarehouseEl && qtyPendingShipEl) {
                    qtyInWarehouseEl.innerHTML = qtyInWarehouse;
                    if(qtyPendingShip > 0) {
                        qtyPendingShipEl.innerHTML = qtyPendingShip + '/ ' + qtyToShip;
                    } else {
                        qtyPendingShipEl.innerHTML = '';
                    }              
                }
            }
        }
    }

    /*
     * Select warehouse to create shipment
     */
    function changeShipmentWarehouse() {
        var selectWarehouseId = $("shipment[warehouse]").value;
        var warehouse = warehouseJson[selectWarehouseId];

        if(typeof warehouse === 'undefined') {
            $("shipment_request_stock_notify").innerHTML = '';
            return;
        }
        var items = warehouse['items'];
        for (var itemId in items) {
            var item = items[itemId];
            /* find qty-elements */
            var qtyInWarehouseEl =  $("qty_in_warehouse["+ itemId +"]");
            var qtyPendingShipEl =  $("qty_pending_ship["+ itemId +"]");
            var qtyToShipEl = $("shipment[items][" +itemId+ "]");
            if(!qtyToShipEl) {
                /* the qty-to-ship input doesn't exist */
                continue;
            }

            /* calculate qtys */
            var qtyInWarehouse = item['qty_in_warehouse'];
            var qtyToShip;
            if(getQtyToShip(itemId) === false) {
                qtyToShip = qtyToShipEl.value;
                setQtyToShip(itemId, qtyToShip);
            } else {
                qtyToShip = getQtyToShip(itemId);
            }
            var qtyPendingShip = Math.max(0, qtyToShip - qtyInWarehouse);;
            var qtyCanShip = Math.min(qtyToShip, qtyInWarehouse);
            
            /* fill qtys to elements */
            qtyToShipEl.value = qtyCanShip;
            if(qtyInWarehouseEl && qtyPendingShipEl) {
                qtyInWarehouseEl.innerHTML = qtyInWarehouse;
                if(qtyPendingShip > 0) {
                    qtyPendingShipEl.innerHTML = qtyPendingShip + '/ ' + qtyToShip;
                } else {
                    qtyPendingShipEl.innerHTML = '';
                }
            }
        }

        showRequestStockNotify(selectWarehouseId, warehouse);
    }
    
    function showRequestStockNotify(warehouseId, warehouseData) {
        if(warehouseData['lack_qty'] > 0) {
            var url = requestStockUrl + '?des_warehouse_id=' + warehouseId;
            var label = '<a href="'+url+'" target="_blank">' + $t('Request stocks') + '</a> ' 
                    + $t('of lack items to current warehouse:') 
                    + ' <strong>' 
                    + warehouseData['info']['warehouse_name']
                    + ' ('+ warehouseData['info']['warehouse_code'] +')</strong>';
        } else {
            var label = '';
        }
        $("shipment_request_stock_notify").innerHTML = label;
    }
    
    function setQtyToShip(itemId, qty) {
        if(typeof window.inventoryShipItems == 'undefined') {
            window.inventoryShipItems = {};       
        }
        window.inventoryShipItems[itemId] = qty;
    }
    
    function getQtyToShip(itemId) {
        if(typeof window.inventoryShipItems == 'undefined') {
            return false;
        }
        if(typeof window.inventoryShipItems[itemId] == 'undefined') {
            return false;
        }        
        
        return window.inventoryShipItems[itemId];
    }
});
</script>
